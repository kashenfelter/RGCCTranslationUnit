\name{RGCCTranslationUnit-internal}
% 234 ^\alias{ here!
\alias{addPending}
\alias{asEnumDef}
\alias{assignsToField}
\alias{asStringWarnings}
\alias{backquote}
\alias{backtick}
\alias{[[.BaseClassesInfo}
\alias{builtInClasses}
\alias{builtinCTypeAccessors}
\alias{builtinCTypeMap}
\alias{builtinTypeClassMap}
\alias{builtinTypeMap}
\alias{checkNodeAttribute}
\alias{checkScope}
\alias{checkSource}
\alias{clearDefinitions}
\alias{coerceRToEnumeration}
\alias{collectOutVars}
\alias{computeOverloadedSignatures}
\alias{computePERL5LIB}
\alias{computeScope}
\alias{convertToRMap}
\alias{createCallInheritedCode}
\alias{createDerivedMethod}
\alias{createDerivedMethods}
\alias{createDynamicCastCode}
\alias{createNamesMethod}
\alias{createNativeCode}
\alias{createNativeReference}
\alias{createOverloadedDispatchCode}
\alias{createRCode}
\alias{createRFieldAccessors}
\alias{createRoutineBinding}
\alias{createStructFree}
\alias{createTU}
\alias{DefaultHeaderFiles}
\alias{defineExternalArray}
\alias{defineStructClass}
\alias{derefNativeReference}
\alias{derivedFrom}
\alias{disccardVirtualSubMethods}
\alias{discoverEnums}
\alias{doDynamicCast}
\alias{expandConstantIncludeFileNames}
\alias{externC}
\alias{FF_fun_names}
\alias{FF_funs}
\alias{fieldSymbolAccessors}
\alias{filterDefines}
\alias{findAllMethodsByName}
\alias{findBitwiseFunctionOf}
\alias{findFirstFileDecl}
\alias{findTUFile}
\alias{fixupFieldName}
\alias{fixupStructNames}
\alias{followFields}
\alias{formatCode}
\alias{functionParameterInfo}
\alias{GCC::Node::target_expr}
\alias{generateClassBindings}
\alias{generateClassCode}
\alias{generateCopyArrayToR}
\alias{generateDynamicGlobalVariableCode}
\alias{generateEnumCConverters}
\alias{generateGlobalVarCode}
\alias{generateGlobalVariableCode}
\alias{generateRegistrationCode}
\alias{generateRegistrationEntry}
\alias{generateRegistrationNamespaceInfo}
\alias{generateRegistrationRoutine}
\alias{generateStructCreation}
\alias{generateStructSetAs}
\alias{getAll}
\alias{getArgList}
\alias{getCallGraphFromFields}
\alias{getCallInfo}
\alias{getClassHierarchyMatrix}
\alias{getCopyArrayName}
\alias{getCopyFieldCode}
%\alias{get_.C_type}
\alias{getDestructorNames}
\alias{getDuplicates}
\alias{getElementNames}
\alias{getEnumDef}
\alias{getEnumValues}
\alias{getExportNames.C++ClassInterfaceBindings}
\alias{getFFCalls}
\alias{getFromFields}
\alias{getFromOperands}
\alias{getFunctionName}
\alias{getGlobalInfo}
\alias{getIndex}
\alias{getInheritedMethod}
\alias{getInOutArgsFromFields}
\alias{getModifyFieldExpressions}
\alias{getMutableParameters}
\alias{getName}
\alias{getNativeRoutineCalls}
\alias{getNativeType}
\alias{getNext}
\alias{getNextNode}
\alias{getNextNode.PerlReference}
\alias{getNodeID}
\alias{getNodeID.default}
\alias{getNodeID.NativeClassMethod}
\alias{getNodeID.NativeRoutineDescription}
\alias{getNodeID.PendingType}
\alias{getNodeName}
\alias{getParameters}
\alias{getParameters.GCC::Node::function_decl}
\alias{getParameters.GCC::Node::function_type}
\alias{getParameters.GCC::Node::method_type}
\alias{getParameters.GCC::Node::parm_decl}
\alias{getParameters.GCC::Node::tree_list}
\alias{getQualifiers}
\alias{getRConstructorFunctionName}
\alias{getRecordNodes}
\alias{getReferenceClassName}
\alias{getReferencedDataTypes}
\alias{getRootClasses}
\alias{getStructCopyRoutineName}
\alias{getType}
\alias{getTypeName}
\alias{getUnnamedParameters}
\alias{getVirtualSignature}
\alias{groupEls}
\alias{gsubset}
\alias{guessBitwiseEnum}
\alias{guessInterfaceType}
\alias{hasCopyConstructor}
\alias{helperInfo}
\alias{ignoreClasses}
\alias{ImplicitConstructorNames}
\alias{Indent}
\alias{isAbstractClass}
\alias{isBodyEmpty}
\alias{is.CallCompatible}
\alias{is.CCompatible}
\alias{isClassDefNode}
\alias{isConstant}
\alias{is.CParameterType}
\alias{isCPlusPlus}
%\alias{is_.C_routine}
\alias{isEmpty}
\alias{isNewGCC}
\alias{isPending}
\alias{isPureMethod}
\alias{isResolved}
\alias{isSEXPType}
\alias{isSourceFile}
\alias{lookupTypeMap}
\alias{makeFactor}
\alias{makeRoutineDescription}
\alias{names.BaseClassesInfo}
\alias{NativeMethodName}
\alias{ngetClassNodes}
\alias{NullBinding}
\alias{orderClasses}
\alias{origCreateDerivedClass}
\alias{PointerType}
\alias{print.DefineConstants}
\alias{print.ResolvedNativeClassMethod}
\alias{print.StructDefinition}
\alias{print.TypedefDefinition}
\alias{processFunction}
\alias{readRoutines}
\alias{refersTo}
\alias{refersToOperand}
\alias{registerType}
\alias{registrationInfo}
\alias{registrationTypes}
\alias{removeDuplicates}
\alias{removeOverriddenMethods}
\alias{reorderMacros}
\alias{ReservedWords}
\alias{resolved}
\alias{resolvePendingType}
\alias{RFunctionDefinition}
\alias{RMethodDefinition}
\alias{sameType}
\alias{SetMethod}
\alias{SpecialFieldNames}
\alias{startsWith}
\alias{toRInitializer}
\alias{toRInitializer,character,ANY-method}
\alias{toRInitializer,ANY,ANY-method}
\alias{toRInitializer,InitializerValue,ANY-method}
\alias{toRInitializer,VariableDefaultValue,ANY-method}
\alias{toRInitializer.ANY,ANY-method}
\alias{toRInitializer,integer,list-method}
\alias{toRInitializer,integer,PointerType-method}
\alias{trim}
\alias{TRUEp}
\alias{typeName}
\alias{UndefFreeVariables}
\alias{USE_NATIVE_TU_PARSER}
\alias{USE_PERL_TU_PARSER}
\alias{userConversion}
\alias{WalkFields}
\alias{WalkOperand}
\alias{Warning}
\alias{writeDocumentation}
\alias{writeDocumentation,CStructInterface-method}
\alias{writeEnumGenerationRCode}
\alias{xxxxxgetClassMethods}

\alias{show,CodeDefinition-method}
\alias{show,DefineConstants-method}
\alias{show,GCCNode-method}
\alias{show,ResolvedNativeRoutine-method}
\alias{show,RFunctionDefinition-method}
\alias{show,RoutineDefinition-method}

\alias{[,SelfSubsettingList,ANY,ANY-method}


\title{Undocumented internal objects for RGCCTranslationUnit}
\description{
  These are internal functions for the moment that are not explicitly
  unexported, but are accessible to ease development.
  Some of these will be made available to developers and people
  using the package to do further processing of code rather than
  just using the top-level functionality.

  This is an illustration of the need for a "protected" export for use
  in other packages by their authors, not the users.
}
\keyword{programming}
