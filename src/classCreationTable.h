__gnu_cxx::hash_map<const char*, InstanceCreatorFun, __gnu_cxx::hash<const char*>, eqstr> ClassCreationTable( 149 );


void initializeClassCreationTable()
{
   ClassCreationTable[strdup("abs_expr")] = &abs_expr::createInstance;
   ClassCreationTable[strdup("addr_expr")] = &addr_expr::createInstance;
   ClassCreationTable[strdup("array_ref")] = &array_ref::createInstance;
   ClassCreationTable[strdup("array_type")] = &array_type::createInstance;
   ClassCreationTable[strdup("arrow_expr")] = &arrow_expr::createInstance;
   ClassCreationTable[strdup("baselink")] = &baselink::createInstance;
   ClassCreationTable[strdup("bind_expr")] = &bind_expr::createInstance;
   ClassCreationTable[strdup("binfo")] = &binfo::createInstance;
   ClassCreationTable[strdup("bit_and_expr")] = &bit_and_expr::createInstance;
   ClassCreationTable[strdup("bit_field_ref")] = &bit_field_ref::createInstance;
   ClassCreationTable[strdup("bit_ior_expr")] = &bit_ior_expr::createInstance;
   ClassCreationTable[strdup("bit_not_expr")] = &bit_not_expr::createInstance;
   ClassCreationTable[strdup("bit_xor_expr")] = &bit_xor_expr::createInstance;
   ClassCreationTable[strdup("boolean_type")] = &boolean_type::createInstance;
   ClassCreationTable[strdup("break_stmt")] = &break_stmt::createInstance;
   ClassCreationTable[strdup("call_expr")] = &call_expr::createInstance;
   ClassCreationTable[strdup("case_label")] = &case_label::createInstance;
   ClassCreationTable[strdup("case_label_expr")] = &case_label_expr::createInstance;
   ClassCreationTable[strdup("cast_expr")] = &cast_expr::createInstance;
   ClassCreationTable[strdup("complex_expr")] = &complex_expr::createInstance;
   ClassCreationTable[strdup("complex_type")] = &complex_type::createInstance;
   ClassCreationTable[strdup("component_ref")] = &component_ref::createInstance;
   ClassCreationTable[strdup("compound_expr")] = &compound_expr::createInstance;
   ClassCreationTable[strdup("compound_stmt")] = &compound_stmt::createInstance;
   ClassCreationTable[strdup("cond_expr")] = &cond_expr::createInstance;
   ClassCreationTable[strdup("const_cast_expr")] = &const_cast_expr::createInstance;
   ClassCreationTable[strdup("const_decl")] = &const_decl::createInstance;
   ClassCreationTable[strdup("constructor")] = &constructor::createInstance;
   ClassCreationTable[strdup("continue_stmt")] = &continue_stmt::createInstance;
   ClassCreationTable[strdup("convert_expr")] = &convert_expr::createInstance;
   ClassCreationTable[strdup("ctor_initializer")] = &ctor_initializer::createInstance;
   ClassCreationTable[strdup("ctor_stmt")] = &ctor_stmt::createInstance;
   ClassCreationTable[strdup("decl_expr")] = &decl_expr::createInstance;
   ClassCreationTable[strdup("decl_stmt")] = &decl_stmt::createInstance;
   ClassCreationTable[strdup("dl_expr")] = &dl_expr::createInstance;
   ClassCreationTable[strdup("do_stmt")] = &do_stmt::createInstance;
   ClassCreationTable[strdup("dotstar_expr")] = &dotstar_expr::createInstance;
   ClassCreationTable[strdup("enumeral_type")] = &enumeral_type::createInstance;
   ClassCreationTable[strdup("eq_expr")] = &eq_expr::createInstance;
   ClassCreationTable[strdup("error_mark")] = &error_mark::createInstance;
   ClassCreationTable[strdup("expr_stmt")] = &expr_stmt::createInstance;
   ClassCreationTable[strdup("field_decl")] = &field_decl::createInstance;
   ClassCreationTable[strdup("file_stmt")] = &file_stmt::createInstance;
   ClassCreationTable[strdup("fix_trunc_expr")] = &fix_trunc_expr::createInstance;
   ClassCreationTable[strdup("float_expr")] = &float_expr::createInstance;
   ClassCreationTable[strdup("for_stmt")] = &for_stmt::createInstance;
   ClassCreationTable[strdup("function_decl")] = &function_decl::createInstance;
   ClassCreationTable[strdup("function_type")] = &function_type::createInstance;
   ClassCreationTable[strdup("ge_expr")] = &ge_expr::createInstance;
   ClassCreationTable[strdup("goto_expr")] = &goto_expr::createInstance;
   ClassCreationTable[strdup("goto_stmt")] = &goto_stmt::createInstance;
   ClassCreationTable[strdup("gt_expr")] = &gt_expr::createInstance;
   ClassCreationTable[strdup("handler")] = &handler::createInstance;
   ClassCreationTable[strdup("identifier_node")] = &identifier_node::createInstance;
   ClassCreationTable[strdup("if_stmt")] = &if_stmt::createInstance;
   ClassCreationTable[strdup("imagpart_expr")] = &imagpart_expr::createInstance;
   ClassCreationTable[strdup("indirect_ref")] = &indirect_ref::createInstance;
   ClassCreationTable[strdup("init_expr")] = &init_expr::createInstance;
   ClassCreationTable[strdup("integer_cst")] = &integer_cst::createInstance;
   ClassCreationTable[strdup("integer_type")] = &integer_type::createInstance;
   ClassCreationTable[strdup("label_decl")] = &label_decl::createInstance;
   ClassCreationTable[strdup("label_expr")] = &label_expr::createInstance;
   ClassCreationTable[strdup("label_stmt")] = &label_stmt::createInstance;
   ClassCreationTable[strdup("lang_type")] = &lang_type::createInstance;
   ClassCreationTable[strdup("le_expr")] = &le_expr::createInstance;
   ClassCreationTable[strdup("lshift_expr")] = &lshift_expr::createInstance;
   ClassCreationTable[strdup("lt_expr")] = &lt_expr::createInstance;
   ClassCreationTable[strdup("max_expr")] = &max_expr::createInstance;
   ClassCreationTable[strdup("member_ref")] = &member_ref::createInstance;
   ClassCreationTable[strdup("method_type")] = &method_type::createInstance;
   ClassCreationTable[strdup("min_expr")] = &min_expr::createInstance;
   ClassCreationTable[strdup("minus_expr")] = &minus_expr::createInstance;
   ClassCreationTable[strdup("modify_expr")] = &modify_expr::createInstance;
   ClassCreationTable[strdup("modop_expr")] = &modop_expr::createInstance;
   ClassCreationTable[strdup("mult_expr")] = &mult_expr::createInstance;
   ClassCreationTable[strdup("namespace_decl")] = &namespace_decl::createInstance;
   ClassCreationTable[strdup("ne_expr")] = &ne_expr::createInstance;
   ClassCreationTable[strdup("negate_expr")] = &negate_expr::createInstance;
   ClassCreationTable[strdup("non_lvalue_expr")] = &non_lvalue_expr::createInstance;
   ClassCreationTable[strdup("nop_expr")] = &nop_expr::createInstance;
   ClassCreationTable[strdup("nw_expr")] = &nw_expr::createInstance;
   ClassCreationTable[strdup("obj_type_ref")] = &obj_type_ref::createInstance;
   ClassCreationTable[strdup("overload")] = &overload::createInstance;
   ClassCreationTable[strdup("parm_decl")] = &parm_decl::createInstance;
   ClassCreationTable[strdup("plus_expr")] = &plus_expr::createInstance;
   ClassCreationTable[strdup("pointer_type")] = &pointer_type::createInstance;
   ClassCreationTable[strdup("postdecrement_expr")] = &postdecrement_expr::createInstance;
   ClassCreationTable[strdup("postincrement_expr")] = &postincrement_expr::createInstance;
   ClassCreationTable[strdup("predecrement_expr")] = &predecrement_expr::createInstance;
   ClassCreationTable[strdup("preincrement_expr")] = &preincrement_expr::createInstance;
   ClassCreationTable[strdup("rdiv_expr")] = &rdiv_expr::createInstance;
   ClassCreationTable[strdup("real_cst")] = &real_cst::createInstance;
   ClassCreationTable[strdup("realpart_expr")] = &realpart_expr::createInstance;
   ClassCreationTable[strdup("real_type")] = &real_type::createInstance;
   ClassCreationTable[strdup("record_type")] = &record_type::createInstance;
   ClassCreationTable[strdup("reference_type")] = &reference_type::createInstance;
   ClassCreationTable[strdup("reinterpret_cast_expr")] = &reinterpret_cast_expr::createInstance;
   ClassCreationTable[strdup("result_decl")] = &result_decl::createInstance;
   ClassCreationTable[strdup("return_expr")] = &return_expr::createInstance;
   ClassCreationTable[strdup("return_stmt")] = &return_stmt::createInstance;
   ClassCreationTable[strdup("rshift_expr")] = &rshift_expr::createInstance;
   ClassCreationTable[strdup("save_expr")] = &save_expr::createInstance;
   ClassCreationTable[strdup("scope_ref")] = &scope_ref::createInstance;
   ClassCreationTable[strdup("scope_stmt")] = &scope_stmt::createInstance;
   ClassCreationTable[strdup("sizeof_expr")] = &sizeof_expr::createInstance;
   ClassCreationTable[strdup("statement_list")] = &statement_list::createInstance;
   ClassCreationTable[strdup("static_cast_expr")] = &static_cast_expr::createInstance;
   ClassCreationTable[strdup("stmt_expr")] = &stmt_expr::createInstance;
   ClassCreationTable[strdup("string_cst")] = &string_cst::createInstance;
   ClassCreationTable[strdup("switch_expr")] = &switch_expr::createInstance;
   ClassCreationTable[strdup("switch_stmt")] = &switch_stmt::createInstance;
   ClassCreationTable[strdup("target_expr")] = &target_expr::createInstance;
   ClassCreationTable[strdup("template_decl")] = &template_decl::createInstance;
   ClassCreationTable[strdup("template_id_expr")] = &template_id_expr::createInstance;
   ClassCreationTable[strdup("template_parm_index")] = &template_parm_index::createInstance;
   ClassCreationTable[strdup("template_type_parm")] = &template_type_parm::createInstance;
   ClassCreationTable[strdup("throw_expr")] = &throw_expr::createInstance;
   ClassCreationTable[strdup("translation_unit_decl")] = &translation_unit_decl::createInstance;
   ClassCreationTable[strdup("tree_list")] = &tree_list::createInstance;
   ClassCreationTable[strdup("tree_vec")] = &tree_vec::createInstance;
   ClassCreationTable[strdup("trunc_div_expr")] = &trunc_div_expr::createInstance;
   ClassCreationTable[strdup("trunc_mod_expr")] = &trunc_mod_expr::createInstance;
   ClassCreationTable[strdup("truth_and_expr")] = &truth_and_expr::createInstance;
   ClassCreationTable[strdup("truth_andif_expr")] = &truth_andif_expr::createInstance;
   ClassCreationTable[strdup("truth_not_expr")] = &truth_not_expr::createInstance;
   ClassCreationTable[strdup("truth_or_expr")] = &truth_or_expr::createInstance;
   ClassCreationTable[strdup("truth_orif_expr")] = &truth_orif_expr::createInstance;
   ClassCreationTable[strdup("try_block")] = &try_block::createInstance;
   ClassCreationTable[strdup("try_catch_expr")] = &try_catch_expr::createInstance;
   ClassCreationTable[strdup("try_finally")] = &try_finally::createInstance;
   ClassCreationTable[strdup("type_decl")] = &type_decl::createInstance;
   ClassCreationTable[strdup("typename_type")] = &typename_type::createInstance;
   ClassCreationTable[strdup("union_type")] = &union_type::createInstance;
   ClassCreationTable[strdup("var_decl")] = &var_decl::createInstance;
   ClassCreationTable[strdup("vector_type")] = &vector_type::createInstance;
   ClassCreationTable[strdup("void_type")] = &void_type::createInstance;
   ClassCreationTable[strdup("while_stmt")] = &while_stmt::createInstance;
   ClassCreationTable[strdup("exact_div_expr")] = &exact_div_expr::createInstance;
   ClassCreationTable[strdup("floor_div_expr")] = &floor_div_expr::createInstance;
   ClassCreationTable[strdup("floor_mod_expr")] = &floor_mod_expr::createInstance;
   ClassCreationTable[strdup("ceil_div_expr")] = &ceil_div_expr::createInstance;
   ClassCreationTable[strdup("ceil_mod_expr")] = &ceil_mod_expr::createInstance;
   ClassCreationTable[strdup("round_div_expr")] = &round_div_expr::createInstance;
   ClassCreationTable[strdup("round_mod_expr")] = &round_mod_expr::createInstance;
   ClassCreationTable[strdup("aggr_init_expr")] = &aggr_init_expr::createInstance;
   ClassCreationTable[strdup("using_decl")] = &using_decl::createInstance;
   ClassCreationTable[strdup("asm_expr")] = &asm_expr::createInstance;
   ClassCreationTable[strdup("tag_defn")] = &tag_defn::createInstance;
   ClassCreationTable[strdup("offset_type")] = &offset_type::createInstance;
}
const char * abs_expr::RClassName = "GCC::Node::abs_expr";
const char * addr_expr::RClassName = "GCC::Node::addr_expr";
const char * array_ref::RClassName = "GCC::Node::array_ref";
const char * array_type::RClassName = "GCC::Node::array_type";
const char * arrow_expr::RClassName = "GCC::Node::arrow_expr";
const char * baselink::RClassName = "GCC::Node::baselink";
const char * bind_expr::RClassName = "GCC::Node::bind_expr";
const char * binfo::RClassName = "GCC::Node::binfo";
const char * bit_and_expr::RClassName = "GCC::Node::bit_and_expr";
const char * bit_field_ref::RClassName = "GCC::Node::bit_field_ref";
const char * bit_ior_expr::RClassName = "GCC::Node::bit_ior_expr";
const char * bit_not_expr::RClassName = "GCC::Node::bit_not_expr";
const char * bit_xor_expr::RClassName = "GCC::Node::bit_xor_expr";
const char * boolean_type::RClassName = "GCC::Node::boolean_type";
const char * break_stmt::RClassName = "GCC::Node::break_stmt";
const char * call_expr::RClassName = "GCC::Node::call_expr";
const char * case_label::RClassName = "GCC::Node::case_label";
const char * case_label_expr::RClassName = "GCC::Node::case_label_expr";
const char * cast_expr::RClassName = "GCC::Node::cast_expr";
const char * complex_expr::RClassName = "GCC::Node::complex_expr";
const char * complex_type::RClassName = "GCC::Node::complex_type";
const char * component_ref::RClassName = "GCC::Node::component_ref";
const char * compound_expr::RClassName = "GCC::Node::compound_expr";
const char * compound_stmt::RClassName = "GCC::Node::compound_stmt";
const char * cond_expr::RClassName = "GCC::Node::cond_expr";
const char * const_cast_expr::RClassName = "GCC::Node::const_cast_expr";
const char * const_decl::RClassName = "GCC::Node::const_decl";
const char * constructor::RClassName = "GCC::Node::constructor";
const char * continue_stmt::RClassName = "GCC::Node::continue_stmt";
const char * convert_expr::RClassName = "GCC::Node::convert_expr";
const char * ctor_initializer::RClassName = "GCC::Node::ctor_initializer";
const char * ctor_stmt::RClassName = "GCC::Node::ctor_stmt";
const char * decl_expr::RClassName = "GCC::Node::decl_expr";
const char * decl_stmt::RClassName = "GCC::Node::decl_stmt";
const char * dl_expr::RClassName = "GCC::Node::dl_expr";
const char * do_stmt::RClassName = "GCC::Node::do_stmt";
const char * dotstar_expr::RClassName = "GCC::Node::dotstar_expr";
const char * enumeral_type::RClassName = "GCC::Node::enumeral_type";
const char * eq_expr::RClassName = "GCC::Node::eq_expr";
const char * error_mark::RClassName = "GCC::Node::error_mark";
const char * expr_stmt::RClassName = "GCC::Node::expr_stmt";
const char * field_decl::RClassName = "GCC::Node::field_decl";
const char * file_stmt::RClassName = "GCC::Node::file_stmt";
const char * fix_trunc_expr::RClassName = "GCC::Node::fix_trunc_expr";
const char * float_expr::RClassName = "GCC::Node::float_expr";
const char * for_stmt::RClassName = "GCC::Node::for_stmt";
const char * function_decl::RClassName = "GCC::Node::function_decl";
const char * function_type::RClassName = "GCC::Node::function_type";
const char * ge_expr::RClassName = "GCC::Node::ge_expr";
const char * goto_expr::RClassName = "GCC::Node::goto_expr";
const char * goto_stmt::RClassName = "GCC::Node::goto_stmt";
const char * gt_expr::RClassName = "GCC::Node::gt_expr";
const char * handler::RClassName = "GCC::Node::handler";
const char * identifier_node::RClassName = "GCC::Node::identifier_node";
const char * if_stmt::RClassName = "GCC::Node::if_stmt";
const char * imagpart_expr::RClassName = "GCC::Node::imagpart_expr";
const char * indirect_ref::RClassName = "GCC::Node::indirect_ref";
const char * init_expr::RClassName = "GCC::Node::init_expr";
const char * integer_cst::RClassName = "GCC::Node::integer_cst";
const char * integer_type::RClassName = "GCC::Node::integer_type";
const char * label_decl::RClassName = "GCC::Node::label_decl";
const char * label_expr::RClassName = "GCC::Node::label_expr";
const char * label_stmt::RClassName = "GCC::Node::label_stmt";
const char * lang_type::RClassName = "GCC::Node::lang_type";
const char * le_expr::RClassName = "GCC::Node::le_expr";
const char * lshift_expr::RClassName = "GCC::Node::lshift_expr";
const char * lt_expr::RClassName = "GCC::Node::lt_expr";
const char * max_expr::RClassName = "GCC::Node::max_expr";
const char * member_ref::RClassName = "GCC::Node::member_ref";
const char * method_type::RClassName = "GCC::Node::method_type";
const char * min_expr::RClassName = "GCC::Node::min_expr";
const char * minus_expr::RClassName = "GCC::Node::minus_expr";
const char * modify_expr::RClassName = "GCC::Node::modify_expr";
const char * modop_expr::RClassName = "GCC::Node::modop_expr";
const char * mult_expr::RClassName = "GCC::Node::mult_expr";
const char * namespace_decl::RClassName = "GCC::Node::namespace_decl";
const char * ne_expr::RClassName = "GCC::Node::ne_expr";
const char * negate_expr::RClassName = "GCC::Node::negate_expr";
const char * non_lvalue_expr::RClassName = "GCC::Node::non_lvalue_expr";
const char * nop_expr::RClassName = "GCC::Node::nop_expr";
const char * nw_expr::RClassName = "GCC::Node::nw_expr";
const char * obj_type_ref::RClassName = "GCC::Node::obj_type_ref";
const char * overload::RClassName = "GCC::Node::overload";
const char * parm_decl::RClassName = "GCC::Node::parm_decl";
const char * plus_expr::RClassName = "GCC::Node::plus_expr";
const char * pointer_type::RClassName = "GCC::Node::pointer_type";
const char * postdecrement_expr::RClassName = "GCC::Node::postdecrement_expr";
const char * postincrement_expr::RClassName = "GCC::Node::postincrement_expr";
const char * predecrement_expr::RClassName = "GCC::Node::predecrement_expr";
const char * preincrement_expr::RClassName = "GCC::Node::preincrement_expr";
const char * rdiv_expr::RClassName = "GCC::Node::rdiv_expr";
const char * real_cst::RClassName = "GCC::Node::real_cst";
const char * realpart_expr::RClassName = "GCC::Node::realpart_expr";
const char * real_type::RClassName = "GCC::Node::real_type";
const char * record_type::RClassName = "GCC::Node::record_type";
const char * reference_type::RClassName = "GCC::Node::reference_type";
const char * reinterpret_cast_expr::RClassName = "GCC::Node::reinterpret_cast_expr";
const char * result_decl::RClassName = "GCC::Node::result_decl";
const char * return_expr::RClassName = "GCC::Node::return_expr";
const char * return_stmt::RClassName = "GCC::Node::return_stmt";
const char * rshift_expr::RClassName = "GCC::Node::rshift_expr";
const char * save_expr::RClassName = "GCC::Node::save_expr";
const char * scope_ref::RClassName = "GCC::Node::scope_ref";
const char * scope_stmt::RClassName = "GCC::Node::scope_stmt";
const char * sizeof_expr::RClassName = "GCC::Node::sizeof_expr";
const char * statement_list::RClassName = "GCC::Node::statement_list";
const char * static_cast_expr::RClassName = "GCC::Node::static_cast_expr";
const char * stmt_expr::RClassName = "GCC::Node::stmt_expr";
const char * string_cst::RClassName = "GCC::Node::string_cst";
const char * switch_expr::RClassName = "GCC::Node::switch_expr";
const char * switch_stmt::RClassName = "GCC::Node::switch_stmt";
const char * target_expr::RClassName = "GCC::Node::target_expr";
const char * template_decl::RClassName = "GCC::Node::template_decl";
const char * template_id_expr::RClassName = "GCC::Node::template_id_expr";
const char * template_parm_index::RClassName = "GCC::Node::template_parm_index";
const char * template_type_parm::RClassName = "GCC::Node::template_type_parm";
const char * throw_expr::RClassName = "GCC::Node::throw_expr";
const char * translation_unit_decl::RClassName = "GCC::Node::translation_unit_decl";
const char * tree_list::RClassName = "GCC::Node::tree_list";
const char * tree_vec::RClassName = "GCC::Node::tree_vec";
const char * trunc_div_expr::RClassName = "GCC::Node::trunc_div_expr";
const char * trunc_mod_expr::RClassName = "GCC::Node::trunc_mod_expr";
const char * truth_and_expr::RClassName = "GCC::Node::truth_and_expr";
const char * truth_andif_expr::RClassName = "GCC::Node::truth_andif_expr";
const char * truth_not_expr::RClassName = "GCC::Node::truth_not_expr";
const char * truth_or_expr::RClassName = "GCC::Node::truth_or_expr";
const char * truth_orif_expr::RClassName = "GCC::Node::truth_orif_expr";
const char * try_block::RClassName = "GCC::Node::try_block";
const char * try_catch_expr::RClassName = "GCC::Node::try_catch_expr";
const char * try_finally::RClassName = "GCC::Node::try_finally";
const char * type_decl::RClassName = "GCC::Node::type_decl";
const char * typename_type::RClassName = "GCC::Node::typename_type";
const char * union_type::RClassName = "GCC::Node::union_type";
const char * var_decl::RClassName = "GCC::Node::var_decl";
const char * vector_type::RClassName = "GCC::Node::vector_type";
const char * void_type::RClassName = "GCC::Node::void_type";
const char * while_stmt::RClassName = "GCC::Node::while_stmt";
const char * exact_div_expr::RClassName = "GCC::Node::exact_div_expr";
const char * floor_div_expr::RClassName = "GCC::Node::floor_div_expr";
const char * floor_mod_expr::RClassName = "GCC::Node::floor_mod_expr";
const char * ceil_div_expr::RClassName = "GCC::Node::ceil_div_expr";
const char * ceil_mod_expr::RClassName = "GCC::Node::ceil_mod_expr";
const char * round_div_expr::RClassName = "GCC::Node::round_div_expr";
const char * round_mod_expr::RClassName = "GCC::Node::round_mod_expr";
const char * aggr_init_expr::RClassName = "GCC::Node::aggr_init_expr";
const char * using_decl::RClassName = "GCC::Node::using_decl";
const char * asm_expr::RClassName = "GCC::Node::asm_expr";
const char * tag_defn::RClassName = "GCC::Node::tag_defn";
const char * offset_type::RClassName = "GCC::Node::offset_type"; 
